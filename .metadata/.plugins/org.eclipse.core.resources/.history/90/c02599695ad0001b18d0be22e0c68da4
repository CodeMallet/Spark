package codemallet.spark.weapon;

import java.awt.Rectangle;

import org.lwjgl.opengl.GL11;
import org.newdawn.slick.Color;

import codemallet.spark.Spark;
import codemallet.spark.collision.Collision;
import codemallet.spark.collision.GameCollision;

public class Laser
{
	Spark game;

	char Type;

	double X;

	double Y;

	double StartX;

	double StartY;

	double EndX;

	double EndY;

	double Angle;

	byte Owner;

	short Team;

	short MaxLife;

	short Life;

	short TrailLength = 45;

	short Magnitude = 8;

	short SlowMove = 5;

	short ReverseMagnitude = 1;

	short HitType;

	short HitIndex;

	Color StartColor;

	Color EndColor;

	Laser(Spark game)
	{
		this.game = game;

	}

	void Cycle(int delta)
	{
		Life -= (short) (Magnitude);
		if (Life < 0)
		{
			EndX = X;
			EndY = Y;
		}

		if (EndX > 0 || EndY > 0)
		{
			X = EndX;
			Y = EndY;
			TrailLength -= Magnitude;
		}
		else
		{
			for (int a = 1; a <= SlowMove; a++)
			{
				X += (double) (Math.cos(Angle) * Magnitude) / SlowMove;
				Y += (double) (Math.sin(Angle) * Magnitude) / SlowMove;

				if (checkCollision() == true)
				{
					while (true)
					{
						X -= (double) (Math.cos(Angle) * ReverseMagnitude);
						Y -= (double) (Math.sin(Angle) * ReverseMagnitude);

						if (checkCollision() == false)
						{
							break;
						}
					}

					EndX = X;
					EndY = Y;

					if (HitType == 1)
					{
						game.gameSound.playHitLaser((short) EndX, (short) EndY);
						if (HitIndex == game.gamePlayer.Index)
							game.gameWeapons.laserHit(Owner, Team);
					}
					else
					{
						game.gameSound.playSpark((short) EndX, (short) EndY);
					}

					for (int i = 0; i < 30; i++)
					{
						game.gameSparks.addSpark(X, Y, Angle);
					}

					break;
				}
			}
		}
	}

	void Render()
	{
		int DrawX = (int) X
				- (int) (game.gamePlayer.X - game.gamePlayer.OffsetX);
		int DrawY = (int) Y
				- (int) (game.gamePlayer.Y - game.gamePlayer.OffsetY);

		int DrawX2 = 0;
		int DrawY2 = 0;

		if (Life >= (MaxLife - TrailLength))
		{
			DrawX2 = (int) StartX
					- (int) (game.gamePlayer.X - game.gamePlayer.OffsetX);
			DrawY2 = (int) StartY
					- (int) (int) (game.gamePlayer.Y - game.gamePlayer.OffsetY);
		}
		else
		{
			DrawX2 = (int) X
					- (int) (game.gamePlayer.X - game.gamePlayer.OffsetX)
					- (int) (Math.cos(Angle) * TrailLength);
			DrawY2 = (int) Y
					- (int) (game.gamePlayer.Y - game.gamePlayer.OffsetY)
					- (int) (Math.sin(Angle) * TrailLength);
		}

		GL11.glColor3f(StartColor.r,
				StartColor.g, StartColor.b);
		GL11.glVertex2f(DrawX, DrawY);

		GL11.glColor3f(EndColor.r,
				EndColor.g, EndColor.b);
		GL11.glVertex2f(DrawX2, DrawY2);

	}

	boolean checkCollision()
	{
		int TX = (int) (X / 16);
		int TY = (int) (Y / 16);

		if ((TX > 0) & (TY > 0) & (TX < 256) & (TY < 256))
		{
			int tile = game.gameMap.GameMap.MapData[(TY * game.gameMap.GameMap.width)
					+ TX];

			if ((tile & 0x8000) != 0) // Is it an animation?
			{
				char idx = (char) ((tile & 0x00FF));
				tile = game.gameMap.anim_list[idx].frames[game.gameMap.anim_list[idx].Frame];
			}

			if (GameCollision.checkWeaponCollision(tile, Angle) == true)
			{
				TX *= 16;
				TY *= 16;
				int cy = tile / 40 * 16;
				int cx = tile % 40 * 16;
				Rectangle intersect = Collision.PixelPointCollision((int) X,
						(int) Y, game.imgTileWeapons, TX, TY, 16, 16, cx, cy);
				if (intersect != null)
				{
					return true;
				}
			}
		}

		for (byte i = 0; i < game.gamePlayers.getMaxPlayers(); i++)
		{
			if (game.gamePlayers.inUse(i) == true && i != Owner
					&& game.gamePlayers.getDead(i) == false)
			{
				Rectangle intersect = Collision.PixelPointCollision((int) X,
						(int) Y, game.imgTunaCollision, (int) game.gamePlayers
								.getX(i), (int) game.gamePlayers.getY(i), 31,
						31, game.gamePlayers.getDirection(i) * 32,
						292 + game.gamePlayers.getTeam(i) * 32);
				if (intersect != null)
				{
					HitType = 1;
					HitIndex = i;
					return true;
				}
			}
		}

		return false;
	}
}
